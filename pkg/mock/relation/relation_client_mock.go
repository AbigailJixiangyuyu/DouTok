// Code generated by MockGen. DO NOT EDIT.
// Source: ./kitex_gen/relation/relationservice/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	relation "github.com/TremblingV5/DouTok/kitex_gen/relation"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetFollowCount mocks base method.
func (m *MockClient) GetFollowCount(ctx context.Context, Req *relation.DouyinRelationCountRequest, callOptions ...callopt.Option) (*relation.DouyinRelationCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowCount", varargs...)
	ret0, _ := ret[0].(*relation.DouyinRelationCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowCount indicates an expected call of GetFollowCount.
func (mr *MockClientMockRecorder) GetFollowCount(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowCount", reflect.TypeOf((*MockClient)(nil).GetFollowCount), varargs...)
}

// RelationAction mocks base method.
func (m *MockClient) RelationAction(ctx context.Context, Req *relation.DouyinRelationActionRequest, callOptions ...callopt.Option) (*relation.DouyinRelationActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelationAction", varargs...)
	ret0, _ := ret[0].(*relation.DouyinRelationActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationAction indicates an expected call of RelationAction.
func (mr *MockClientMockRecorder) RelationAction(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationAction", reflect.TypeOf((*MockClient)(nil).RelationAction), varargs...)
}

// RelationFollowList mocks base method.
func (m *MockClient) RelationFollowList(ctx context.Context, Req *relation.DouyinRelationFollowListRequest, callOptions ...callopt.Option) (*relation.DouyinRelationFollowListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelationFollowList", varargs...)
	ret0, _ := ret[0].(*relation.DouyinRelationFollowListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationFollowList indicates an expected call of RelationFollowList.
func (mr *MockClientMockRecorder) RelationFollowList(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationFollowList", reflect.TypeOf((*MockClient)(nil).RelationFollowList), varargs...)
}

// RelationFollowerList mocks base method.
func (m *MockClient) RelationFollowerList(ctx context.Context, Req *relation.DouyinRelationFollowerListRequest, callOptions ...callopt.Option) (*relation.DouyinRelationFollowerListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelationFollowerList", varargs...)
	ret0, _ := ret[0].(*relation.DouyinRelationFollowerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationFollowerList indicates an expected call of RelationFollowerList.
func (mr *MockClientMockRecorder) RelationFollowerList(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationFollowerList", reflect.TypeOf((*MockClient)(nil).RelationFollowerList), varargs...)
}

// RelationFriendList mocks base method.
func (m *MockClient) RelationFriendList(ctx context.Context, Req *relation.DouyinRelationFriendListRequest, callOptions ...callopt.Option) (*relation.DouyinRelationFriendListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelationFriendList", varargs...)
	ret0, _ := ret[0].(*relation.DouyinRelationFriendListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationFriendList indicates an expected call of RelationFriendList.
func (mr *MockClientMockRecorder) RelationFriendList(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationFriendList", reflect.TypeOf((*MockClient)(nil).RelationFriendList), varargs...)
}

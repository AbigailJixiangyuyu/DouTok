// Code generated by MockGen. DO NOT EDIT.
// Source: ./kitex_gen/message/messageservice/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	message "github.com/TremblingV5/DouTok/kitex_gen/message"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// MessageAction mocks base method.
func (m *MockClient) MessageAction(ctx context.Context, Req *message.DouyinMessageActionRequest, callOptions ...callopt.Option) (*message.DouyinMessageActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageAction", varargs...)
	ret0, _ := ret[0].(*message.DouyinMessageActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageAction indicates an expected call of MessageAction.
func (mr *MockClientMockRecorder) MessageAction(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAction", reflect.TypeOf((*MockClient)(nil).MessageAction), varargs...)
}

// MessageChat mocks base method.
func (m *MockClient) MessageChat(ctx context.Context, Req *message.DouyinMessageChatRequest, callOptions ...callopt.Option) (*message.DouyinMessageChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageChat", varargs...)
	ret0, _ := ret[0].(*message.DouyinMessageChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageChat indicates an expected call of MessageChat.
func (mr *MockClientMockRecorder) MessageChat(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageChat", reflect.TypeOf((*MockClient)(nil).MessageChat), varargs...)
}

// MessageFriendList mocks base method.
func (m *MockClient) MessageFriendList(ctx context.Context, Req *message.DouyinFriendListMessageRequest, callOptions ...callopt.Option) (*message.DouyinFriendListMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageFriendList", varargs...)
	ret0, _ := ret[0].(*message.DouyinFriendListMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageFriendList indicates an expected call of MessageFriendList.
func (mr *MockClientMockRecorder) MessageFriendList(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageFriendList", reflect.TypeOf((*MockClient)(nil).MessageFriendList), varargs...)
}

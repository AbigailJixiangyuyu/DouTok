// Code generated by MockGen. DO NOT EDIT.
// Source: ./kitex_gen/comment/commentservice/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	comment "github.com/TremblingV5/DouTok/kitex_gen/comment"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CommentAction mocks base method.
func (m *MockClient) CommentAction(ctx context.Context, Req *comment.DouyinCommentActionRequest, callOptions ...callopt.Option) (*comment.DouyinCommentActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommentAction", varargs...)
	ret0, _ := ret[0].(*comment.DouyinCommentActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentAction indicates an expected call of CommentAction.
func (mr *MockClientMockRecorder) CommentAction(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentAction", reflect.TypeOf((*MockClient)(nil).CommentAction), varargs...)
}

// CommentCount mocks base method.
func (m *MockClient) CommentCount(ctx context.Context, Req *comment.DouyinCommentCountRequest, callOptions ...callopt.Option) (*comment.DouyinCommentCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommentCount", varargs...)
	ret0, _ := ret[0].(*comment.DouyinCommentCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentCount indicates an expected call of CommentCount.
func (mr *MockClientMockRecorder) CommentCount(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentCount", reflect.TypeOf((*MockClient)(nil).CommentCount), varargs...)
}

// CommentList mocks base method.
func (m *MockClient) CommentList(ctx context.Context, Req *comment.DouyinCommentListRequest, callOptions ...callopt.Option) (*comment.DouyinCommentListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommentList", varargs...)
	ret0, _ := ret[0].(*comment.DouyinCommentListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentList indicates an expected call of CommentList.
func (mr *MockClientMockRecorder) CommentList(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentList", reflect.TypeOf((*MockClient)(nil).CommentList), varargs...)
}

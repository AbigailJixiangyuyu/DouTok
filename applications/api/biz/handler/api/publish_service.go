// Code generated by hertz generator.

package api

import (
	"bytes"
	"context"
	"github.com/TremblingV5/DouTok/applications/api/biz/model/api_pack"
	"io"
	"log"
	"strconv"

	"github.com/TremblingV5/DouTok/applications/api/biz/handler"
	"github.com/TremblingV5/DouTok/applications/api/initialize/rpc"
	"github.com/TremblingV5/DouTok/kitex_gen/publish"
	"github.com/TremblingV5/DouTok/pkg/errno"

	api "github.com/TremblingV5/DouTok/applications/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
)

// PublishAction .
//
//	@Tags		Publish视频投稿相关
//
//	@Summary	发布视频操作
//	@Description
//	@Param		title	formData	string	true	"视频标题"
//	@Param		data	formData	file	true	"视频数据"
//	@Success	200		{object}	publish.DouyinPublishActionResponse
//	@Failure	default	{object}	api.DouyinPublishActionResponse
//	@router		/douyin/publish/action [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishActionRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	handler.SendResponse(c, handler.BuildPublishActionResp(errno.ErrBind))
	// 	return
	// }

	req.Title = c.PostForm("title")
	fs, _ := c.FormFile("data")
	f, _ := fs.Open()
	buff := new(bytes.Buffer)
	_, err = io.Copy(buff, f)
	if err != nil {
		log.Panicln(err)
	}
	req.Data = buff.Bytes()

	userId, err := strconv.ParseInt(c.Keys["user_id"].(string), 10, 64)

	if err != nil {
		handler.SendResponse(c, handler.BuildPublishActionResp(errno.ConvertErr(err)))
		return
	}

	// TODO 这个绑定是否能够实现二进制文件的绑定（待测试）
	resp, err := rpc.PublishAction(ctx, rpc.PublishClient, &publish.DouyinPublishActionRequest{
		Title:  req.Title,
		Data:   req.Data,
		UserId: userId,
	})
	if err != nil {
		handler.SendResponse(c, handler.BuildPublishActionResp(errno.ConvertErr(err)))
		return
	}
	// TODO 此处直接返回了 rpc 的 resp
	handler.SendResponse(c, resp)
}

// PublishList .
//
//	@Tags		Publish视频投稿相关
//
//	@Summary	获取用户已发布视频的列表
//	@Description
//	@Success	200		{object}	publish.DouyinPublishListResponse
//	@Failure	default	{object}	api.DouyinPublishListResponse
//	@router		/douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error

	userId, err := strconv.ParseInt(c.Keys["user_id"].(string), 10, 64)
	if err != nil {
		handler.SendResponse(c, handler.BuildPublishListResp(errno.ErrBind))
		return
	}

	resp, err := rpc.PublishList(ctx, rpc.PublishClient, &publish.DouyinPublishListRequest{
		UserId: userId,
	})
	if err != nil {
		handler.SendResponse(c, handler.BuildPublishListResp(errno.ConvertErr(err)))
		return
	}

	videos := make([]*api.Video, 0, len(resp.VideoList))
	for _, v := range resp.VideoList {
		video := api_pack.Video(v)
		videos = append(videos, video)
	}
	apiResp := &api.DouyinPublishListResponse{
		StatusCode: resp.StatusCode,
		StatusMsg:  resp.StatusMsg,
		VideoList:  videos,
	}

	// TODO 此处直接返回了 rpc 的 resp
	handler.SendResponse(c, apiResp)
}
